// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use '@angular/material' as mat;
// Plus imports for other components in your app.
@import url('https://fonts.googleapis.com/css2?family=Rubik:wght@300;400;500;700&display=swap');

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

// Define the theme object.
$donation-theme: mat.define-theme((color: (theme-type: light,
        primary: mat.$azure-palette,
        tertiary: mat.$blue-palette,
        use-system-variables: true),
      typography:(plain-family:'Rubik', brand-family:'Rubik', use-system-variables: true),
    ));

$green-theme: mat.define-theme((color: (theme-type: light,
        primary: mat.$green-palette,
        tertiary: mat.$blue-palette,
        use-system-variables: true),
      typography:(plain-family:'Rubik', brand-family:'Rubik', use-system-variables: true),
    ));

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
:root {
  @include mat.all-component-themes($donation-theme);
  @include mat.system-level-colors($donation-theme);
  @include mat.system-level-typography($donation-theme);
  @include mat.toolbar-color($donation-theme);
}

// Comment out the line below if you want to use the pre-defined typography utility classes.
// For more information: https://material.angular.io/guide/typography#using-typography-styles-in-your-application.
// @include mat.typography-hierarchy($donation-theme);

// Comment out the line below if you want to use the deprecated `color` inputs.
// @include mat.color-variants-backwards-compatibility($donation-theme);
/* You can add global styles to this file, and also import other style files */


// Start input stuff
:root {
  @include mat.form-field-density(-5)
}

.full-width-form-field {
  width: 100%;
}

:root {
  --mat-card-subtitle-text-color: rgba(0, 0, 0, 0.54); //var(--sys-on-surface-variant)
  --mat-card-subtitle-text-weight: 400;
  --mat-toolbar-container-background-color: var(--sys-primary);
  --mat-toolbar-container-text-color: var(--sys-on-primary);
}

.mdc-text-field__input::-webkit-calendar-picker-indicator {
  display: inherit !important;
}

// End input stuff


html,
body {
  height: 100%;
}

body {
  margin: 0;
  font-family: Roboto, 'Helvetica Neue', sans-serif;
}

a {
  background-color: transparent;
  color: #337ab7;
  text-decoration: none;
}

a:hover {
  background-color: transparent;
  color: #337ab7;
  text-decoration: underline;
}

.full-page {
  height: 100%;
  display: flex;
  flex-flow: column;
}

.grow-item {
  height: 250px;
  flex-grow: 1;
  flex-shrink: 0;
  overflow-y: auto;
}

.canceled {
  background-color: lightgray !important;

  >td {
    background-color: lightgray !important;
  }
}

.table,
th,
td {
  border: 1px solid #ddd;
  padding: 10px 10px;
}

th {
  background-color: #f1f1f1;
}

.table {
  width: 100%;
  border-collapse: collapse;
  text-align: center;
}

// *:hover {
//   outline: 1px blue solid;
// }

// Z-index hierarchy to ensure dual-date picker is always on top
.dual-date-picker {
  z-index: 9999 !important;

  .date-select,
  .gregorian-input {
    z-index: 10000 !important;
  }
}

// Keep address autocomplete below dual-date
.mat-autocomplete-panel {
  z-index: 500 !important;
}

// Keep address containers below dual-date
.address-container {
  z-index: 100 !important;
}

// Fix nested modals z-index
// Angular Material creates elements in this order: backdrop, pane, backdrop, pane
// We need: backdrop1(999) < pane1(1000) < backdrop2(1001) < pane2(1002)
.cdk-overlay-backdrop {
  background: rgba(0, 0, 0, 0.6);
  backdrop-filter: blur(3px);
  transition: opacity 0.3s ease-in-out;

  &.cdk-overlay-backdrop-showing {
    opacity: 1;
  }
}

// The issue is that Angular creates backdrop and pane together
// So we need to target them differently - by their container position
.cdk-overlay-container {
  // First dialog layer
  > .cdk-overlay-backdrop:nth-child(1) {
    z-index: 999 !important;
  }

  > .cdk-global-overlay-wrapper:nth-child(2) {
    z-index: 1000 !important;

    .cdk-overlay-pane {
      z-index: 1000 !important;
    }
  }

  // Second dialog layer (nested modal)
  > .cdk-overlay-backdrop:nth-child(3) {
    z-index: 1001 !important;
  }

  > .cdk-global-overlay-wrapper:nth-child(4) {
    z-index: 1002 !important;

    .cdk-overlay-pane {
      z-index: 1002 !important;
    }
  }

  // Third dialog layer
  > .cdk-overlay-backdrop:nth-child(5) {
    z-index: 1003 !important;
  }

  > .cdk-global-overlay-wrapper:nth-child(6) {
    z-index: 1004 !important;

    .cdk-overlay-pane {
      z-index: 1004 !important;
    }
  }

  // Fourth dialog layer
  > .cdk-overlay-backdrop:nth-child(7) {
    z-index: 1005 !important;
  }

  > .cdk-global-overlay-wrapper:nth-child(8) {
    z-index: 1006 !important;

    .cdk-overlay-pane {
      z-index: 1006 !important;
    }
  }
}

// Fix for nested modals - ensure nested modal is always on top and clickable
.nested-modal-panel {
  z-index: 9999 !important;
}

// Force donor details modal to full width
.cdk-overlay-pane:has(.donor-details-modal) {
  max-width: auto !important;
  width: auto !important;
  animation: donorModalFadeIn 0.2s ease-out;

  .mat-mdc-dialog-container,
  .mat-dialog-container {
    max-width: none !important;
    width: auto !important;
    padding: 0 !important;
    overflow: hidden !important;
  }
}

@keyframes donorModalFadeIn {
  0% {
    opacity: 0;
    transform: scale(0.95);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
}